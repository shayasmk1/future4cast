#!/usr/bin/env node

var program = require('commander');
var Bunzip = require('../');
var fs = require('fs');

program
    .version(Bunzip.version)
    .usage('-d|-z [infile] [outfile]')
    .option('-d, --decompress',
	    'Decompress stdin to stdout')
    //.option('-z, --compress',
    //      'Compress stdin to stdout')
    .option('-b, --block <n>',
	    'Extract a single block, starting at <n> bits.', undefined)
    .option('-m, --multistream',
	    'Read a multistream bzip2 file');
program.on('--help', function() {
    console.log('  If <infile> is omitted, reads from stdin.');
    console.log('  If <outfile> is omitted, writes to stdout.');
});
program.parse(process.argv);

if (!program.compress) { program.decompress = true; }

if (program.compress && program.block !== undefined) {
    console.error('--block can only be used with decompression');
    return 1;
}

if (program.decompress && program.compress) {
    console.error('Must specify either -d or -z.');
    return 1;
}

var makeInStream = function(in_fd) {
    var stat = fs.fstatSync(in_fd);
    var stream = {
	buffer: new Buffer(4096),
	filePos: null,
	pos: 0,
	end: 0,
	_fillBuffer: function() {
	    this.end = fs.readSync(in_fd, this.buffer, 0, this.buffer.length,
				  this.filePos);
	    this.pos = 0;
	    if (this.filePos !== null && this.end > 0) {
		this.filePos += this.end;
	    }
	},
	readByte: function() {
	    if (this.pos >= this.end) { this._fillBuffer(); }
	    if (this.pos < this.end) {
		return this.buffer[this.pos++];
	    }
	    